---
import PersonalityCard from "../../components/IndexCard/PersonalityCard.astro";
import CharacterCard from "../../components/IndexCard/CharacterCard.astro";
import '../../styles/global.css';
import DefaultLayout from "../../layout/DefaultLayout.astro";
import { personalityList, characterList } from "../../index.ts";

function getRandom(arr: string[]): string {
  return arr[Math.floor(Math.random() * arr.length)];
}

const randomPersonality = getRandom(personalityList);
const randomCharacter = getRandom(characterList);
---

<DefaultLayout>
  <main>
    <h1>お題</h1>
    <div class="cards">
      <div class:list={["card-box", "identity-card"]} id="identity-card-box">
        <PersonalityCard title="性格" content={randomPersonality} />
      </div>
      <div class:list={["card-box", "character-card"]} id="character-card-box">
        <CharacterCard title="キャラクター" content={randomCharacter} />
      </div>
    </div>
    <button id="reset-button">
      <p>カードをリセットする</p>
    </button>
    <a href="/guessing" class="start">
      <div class="start-box">
        <p>次のフェーズへ</p>
      </div>
    </a>
  </main>
</DefaultLayout>

<style>
  body {
    background-color: white;
  }

  main {
    display: grid;
    width: 100svw;
    height: 100svh;
    grid-template-rows: auto;
    justify-content: center;
    align-items: center;
  }

  main h1 {
    text-align: center;
    font-size: 4rem;
    margin-bottom: 50px;
    color: #333;
  }

  .cards {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .card-box {
    margin: 60px;
    width: 540px;
  }

  .identity-card {
    z-index: -1;
  }
  
  .character-card {
    z-index: calc(infinity);
  }

  button {
    padding: 10px 20px;
    font-size: 1.5rem;
    color: #C4D4F2;
    background-color: white;
    /* background-color: #C4D4F2; */
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 20px;
  }

  .start-box {
    padding: 4px 0;
    text-align: center;
    font-size: 2rem;
    font-weight: bold;
    color: #2B4C8C;
    margin-bottom: 50px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    border-radius: 0 16px 0 16px;
    transition: color 0.3s;
    z-index: 0;

    /* 右下にbox-shadow */
    box-shadow: 2px 8px 6px rgba(0, 0, 0, 0.1), 3px 3px 2px rgba(0, 0, 0, 0.08);
  }

  .start-box::before {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to right, #2B4C8C 0%, #2B4C8C 100%);
    border-radius: 0 16px 0 16px;
    transform: translateX(-100%);
    transition: transform 0.4s cubic-bezier(0.4,0,0.2,1);
    z-index: -1;
  }

  .start-box:hover::before {
    transform: translateX(0);
  }

  .start {
    display: flex;
    justify-content: center;
    width: 100%;
  }

  .start-box {
    position: relative;
    z-index: 1;
    display: flex;
    justify-content: center;
    width: 80%;
  }

  .start-box:hover {
    color: #fff;
  }

  @media screen and (max-width: 600px) {
    main {
      align-content: space-between;
      justify-content: stretch;
    }

    main h1 {
      font-size: 3rem;
      margin: 30px 0;
    } 

    .cards {
      width: 100%;
      display: flex;
      justify-content: center;
      align-items:flex-end;
      overflow: hidden;
      flex-direction: column;
      padding-top: 50px;
      gap: 10%;
      height: 140%;
    }

    .card-box {
      width: 100%;
      height: 100%;
      margin: 0;
    }

    .start-box {
      width: 80%;
      font-size: 1.5rem;
      margin-top: 20px;
    }
  }
</style>

<script>
import { personalityList, characterList } from "../../index.ts";

function getRandom(arr: string[]): string {
  return arr[Math.floor(Math.random() * arr.length)];
}

const randomPersonality = getRandom(personalityList);
const randomCharacter = getRandom(characterList);

function alreadySetItem(): [string | null, string | null] {
  const randomPersonalityFromSS = sessionStorage.getItem("randomPersonality");
  const randomCharacterFromSS = sessionStorage.getItem("randomCharacter");
  if (randomPersonalityFromSS && randomCharacterFromSS) {
    return [randomPersonalityFromSS, randomCharacterFromSS];
  }
  return [null, null];
}

function setPersonalityContent() {
  // sessionStorageに既に保存されている場合は取得
  const [randomPersonalityFromSS, randomCharacterFromSS] = alreadySetItem();
  if (randomPersonalityFromSS === null && randomCharacterFromSS === null) {
    // sessionStorageに保存
    sessionStorage.setItem("randomPersonality", randomPersonality);
    sessionStorage.setItem("randomCharacter", randomCharacter);
    return;
  }

  // 置き換える
  const personalityCard = document.getElementById("identity-card-box");
  if (personalityCard) {
    let p = personalityCard.querySelector(".text p");
    if (p) {
      p.textContent = randomPersonalityFromSS;
    }
  }

  const characterCard = document.getElementById("character-card-box");
  if (characterCard) {
    let p = characterCard.querySelector(".text p");
    if (p) {
      p.textContent = randomCharacterFromSS;
    }
  }
}

setPersonalityContent();

const resultButton = document.getElementById("reset-button");
if (resultButton) {
  resultButton.addEventListener("click", () => {
    sessionStorage.removeItem("randomPersonality");
    sessionStorage.removeItem("randomCharacter");
    setPersonalityContent();
    window.location.reload();
  });
}

</script>